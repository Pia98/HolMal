package com.holmal.app.holmal.utils;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

import com.holmal.app.holmal.R;
import com.holmal.app.holmal.model.ShoppingList;

import java.util.HashMap;
import java.util.List;


//this class is responsible for displaying the lists in the list overview
public class ShoppingListsAdapter extends BaseAdapter {
    // Todo hier das dann wieder raus hauen:
    // https://stackoverflow.com/questions/5234576/what-adapter-shall-i-use-to-use-hashmap-in-a-listview

    private Context context;
    private HashMap<String, ShoppingList> shoppinglists;
    private String[] listKeys;
    private String openItems = " offene Items";

    //constructor
    public ShoppingListsAdapter(Context context, HashMap<String, ShoppingList> shoppinglists) {
        this.context = context;
        this.shoppinglists = shoppinglists;
        listKeys = shoppinglists.keySet().toArray(new String[shoppinglists.size()]);
    }

    @Override
    public int getCount() {
        return shoppinglists.size();
    }

    @Override
    public Object getItem(int position) {
        return shoppinglists.get(listKeys[position]);
        //return shoppinglists.get(position);
    }

    //only autogenerated
    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        LayoutInflater inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = inflater.inflate(R.layout.single_shoppinglist_layout, parent, false);

        TextView nameView = (TextView) convertView.findViewById(R.id.nameOfList);
        TextView categoryView = (TextView) convertView.findViewById(R.id.categoryOfList);
        TextView descriptionView = (TextView) convertView.findViewById(R.id.amountItemsOnList);

        //nameView.setText(shoppinglists.get(position).getListName());
        nameView.setText(shoppinglists.get(listKeys[position]).getListName());

        //categoryView.setText(shoppinglists.get(position).getCategory());
        categoryView.setText(shoppinglists.get(listKeys[position]).getCategory());


/*
        if(shoppinglists.get(position).getItemsOfThisList()==null || shoppinglists.get(position).getItemsOfThisList().size() == 0){
                descriptionView.setText("Keine offenen Items");
            }
            else {
                descriptionView.setText(shoppinglists.get(position).getItemsOfThisList().size());
                descriptionView.append(openItems);
            }
*/

        if (shoppinglists.get(listKeys[position]).getItemsOfThisList() == null
                || shoppinglists.get(listKeys[position]).getItemsOfThisList().size() == 0) {
            descriptionView.setText(R.string.noOpenItems);
        } else {
            //descriptionView.setText(String.valueOf(shoppinglists.get(listKeys[position]).getItemsOfThisList().size()));
            descriptionView.setText(R.string.openItems);
            //descriptionView.append(openItems);
            descriptionView.append(String.valueOf(shoppinglists.get(listKeys[position]).getItemsOfThisList().size()));
        }

        return convertView;
        //convertView.setOn
    }

}
